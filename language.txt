
;;; Line comment. Only one ; is needed but lisp convention uses several
;;; depending on the situation.
;;; This is a comment block explaining something, like a function

;; This is a comment explaining the meaning of the lines following it

(+ 1 2) ; This comment immediatly follows code that it explains, on the same line

;;; Type specifiers
;;; V is strongly typed, like most languages. But unlike most languages it
;;; is both statically and dynamically typed. There is never any need to
;;; specify types but if types are specified the compiler will use that
;;; information to make compile-time checks for type safety and do additional
;;; optimizations.
;;; Types can be specified for binding symbols (names that you assign values to)
;;; function return values and value literals.
;;; In the case of value literals a type is always guessed by the compiler but
;;; it can be overridden by a manual type specification.
;;; The types are specified by attaching a type object to the appropriate meta
;;; data field of the symbol to be typed. See the section about meta data for
;;; specific details about how meta data works.

hello ; A symbol with no type specified, the type will be Any or inferred
^i32 hello ; A symbol to which only 32 bit signed integers may be bound
^f32 10 ; The number 10, coerced to IEEE 32 bit floating point type

;;; Integers
;;; The default integer is 32 bit signed, called i32 in V.
;;; V does not use the usual names such as byte (or char), short, int etc.
;;; because they mean different things in different languages which
;;; leads to confusion. In V you must specify a bit width and
;;; signedness explicitly if you want to use a specific kind of integer.
;;; The different kinds of integers are:
;;; i8, u8   - signed and unsigned 8 bit integer (byte)
;;; i16, u16 - signed and unsigned 16 bit integer (short)
;;; i32, u32 - signed and unsigned 32 bit integer (int)
;;;            i32 is the default for integer literals, unless
;;;            the literal is too large for an i32 in which case
;;;            it will be promoted to i64 or BigInt
;;; i64, u64 - signed and unsigned 64 bit integer (long or long long)

;; i32 literal
10  ; positive 10
-10 ; negative 10
^u8 10 ; u8 literal
^u64 10 ; u64 literal

;;; Floating point numbers
;;; V supports the usual IEEE floating point numbers but for
;;; naming consistency with the integers they are called
;;; f32  - IEEE single precision (float)
;;; f64  - IEEE double precision (double)
;;; The default type, like for the integers, is the 32 bit one
1.2 ; f32 literal
^f64 1.2 ; this is an IEEE double
;; Scientific notation may be used in floating point literals
-1.2e10
;; The digit before the period can be omitted if it is zero
.538 ; this means 0.538

;;; Pointers
;;; V has a data type for pointers, this is only for platform ABI
;;; interop purposes and the only way it can be used is as a return
;;; value or parameter to functions.
;;; Access to native memory can be gained through the Array type.
;;; There is no literal syntax for pointers.
;;; The type name for pointers is 'pointer'.

;;; Built in collection types

;;; Arrays
;;; V has support for "native arrays" ie. contiguous areas of memory
;;; filled with a succession of data of a specific type.
;;; Arrays are always of a fixed length.
;;; Through arrays and the support for value types (structs) V has good
;;; support for letting the programmer gain some control over memory layout
;;; which can be important when performance matters.
;;; Arrays have literal syntax and can be explicitly or implicitly typed.
;;; If no type is specified and it is impossible to infer the type of the
;;; elements then the elements are assumed to be of Any type.
;; Syntax for arrays
#[1 2 3 4] ; Array of i32 with 4 elements
^[f32] #[1 2 3 4] ; Array of f32 with 4 elements
#[#[1 2] #[3 4]] ; Array of arrays of i32
^[[f32]] #[#[1 2] #[3 4]] ; Explicitly typed array of arrays of f32
;;; There is never any need to specify the length of an array when using
;;; literal syntax since arrays are always a fixed length.

;;; To be able to interop with native code V arrays can be constructed
;;; by supplying a pointer, a length, a type and a size. When an array is
;;; constructed that way its internal data will not be touched (neither
;;; moved nor freed) by the garbage collector.

;;; All of the following built in types are immutable

;;; List
()

;;; Vector
[]

;;; Map
{}

;;; Set
#{}

;; Built in special forms (functions or operators that do not obey the normal language rules)

(ns ...) ; changes the current namespace, creating a new one if the specified namespace did not exist

(quote ...) ; prevents evaluation

(quasi-quote ...) ; like quote but is used for creating code templates, primarily for macros

(unquote ...) ; use inside a quasi-quoted expression to enable evaluation of a subexpression

(unquote-splicing ...) ; like unquote, but must unquote a sequence and the elements of the sequence are inserted in place of the unquote-splicing expression

(def ...) ; binds a value to a symbol in the current namespace and thread

(defshared ...) ; binds a value to a symbol in the current namespace, shared by all threads. Only immutable values and reentrant or pure functions are legal arguments

(with-meta ...) ; modifies the meta data of an object

(with-effects ...) ; Like with-meta but contains information about side effects and is "contagious"

(without-effects ...) ; makes it illegal for a set of specified effects to occurr within the without-effects expression. This is checked at compile or runtime depending on available information

(if ...) ; regular old if statement

(do ...) ; evaluates an arbitrary number of subexpressions in sequence (presumably for side effects) and returns the result of the last one

(let ...) ; locally binds values to symbols

(fn ...) ; creates a function

(get ...) ; gets the value of a field out of an object or structure. Can be overloaded to "get" other things too, like values out of hash tables

(set! ...) ; sets the value of a field in an object or structure. Re. overloading, see get. The ! is naming convention for mutating functions

(type ...) ; constructs a new type

(new ...) ; allocates a new instance of a type (object or boxed struct). Allocations are always thread local initially, defshared moves the objects to the shared heap

;;; Huh, where is defmacro!?
;;; Macros us the fn form just like functions but have an additional entry in their meta data that marks the function as a macro.


;;; TODO:
;;; Some special form for communication between threads?
;;; Or is that just a set of regular built in functions? Probably.


;;; Syntactic sugar
;;; The reader has some syntactic sugar for commonly used built in special forms

^{'meta 'data} hello ; becomes (with-meta hello {'meta 'data})

^String hello ; becomes (with-meta hello {'type vlang/String})

'hello ; becomes (quote hello)

`hello ; becomes (quasi-quote hello)

~hello ; becomes (unquote hello)

~@(hello) ; becomes (unquote-splicing (hello))

